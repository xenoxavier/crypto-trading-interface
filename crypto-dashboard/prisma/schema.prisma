// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(TRADER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]
  trades        Trade[]
  alerts        Alert[]
  auditLogs     AuditLog[]
  apiKeys       ApiKey[]
  subscriptions Subscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Portfolio {
  id          String   @id @default(cuid())
  name        String
  userId      String
  isDefault   Boolean  @default(false)
  totalValue  Float    @default(0)
  totalPnL    Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdings  Holding[]
  trades    Trade[]
  analytics PortfolioAnalytics[]

  @@index([userId])
}

model Holding {
  id          String  @id @default(cuid())
  portfolioId String
  symbol      String
  quantity    Float
  avgPrice    Float
  currentPrice Float  @default(0)
  totalValue  Float   @default(0)
  pnl         Float   @default(0)
  pnlPercent  Float   @default(0)
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, symbol])
  @@index([symbol])
}

model Trade {
  id          String      @id @default(cuid())
  userId      String
  portfolioId String
  symbol      String
  type        TradeType
  side        TradeSide
  quantity    Float
  price       Float
  fee         Float       @default(0)
  total       Float
  status      TradeStatus @default(PENDING)
  executedAt  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([symbol])
  @@index([status])
  @@index([createdAt])
}

model Signal {
  id            String       @id @default(cuid())
  symbol        String
  timeframe     String
  signal        SignalType
  strength      Float        // 0-10 confidence score
  entryPrice    Float
  stopLoss      Float?
  takeProfit    Float?
  riskReward    Float?
  analysis      Json         // Technical analysis data
  metadata      Json?        // Additional AI analysis metadata
  isActive      Boolean      @default(true)
  performance   Float?       // Track signal performance
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  expiresAt     DateTime?

  @@index([symbol])
  @@index([timeframe])
  @@index([signal])
  @@index([createdAt])
  @@index([isActive])
}

model Alert {
  id          String      @id @default(cuid())
  userId      String
  symbol      String
  alertType   AlertType
  condition   String      // JSON string for complex conditions
  targetPrice Float?
  isActive    Boolean     @default(true)
  triggered   Boolean     @default(false)
  triggeredAt DateTime?
  notifyEmail Boolean     @default(true)
  notifyPush  Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([symbol])
  @@index([isActive])
}

model MarketData {
  id          String   @id @default(cuid())
  symbol      String
  timeframe   String
  timestamp   DateTime
  open        Float
  high        Float
  low         Float
  close       Float
  volume      Float
  data        Json?    // Additional market data
  createdAt   DateTime @default(now())

  @@unique([symbol, timeframe, timestamp])
  @@index([symbol, timeframe])
  @@index([timestamp])
}

model TechnicalIndicator {
  id        String   @id @default(cuid())
  symbol    String
  timeframe String
  timestamp DateTime
  rsi       Float?
  macd      Json?    // { macd, signal, histogram }
  bb        Json?    // Bollinger Bands { upper, middle, lower }
  ma20      Float?   // 20-period moving average
  ma50      Float?   // 50-period moving average
  ma200     Float?   // 200-period moving average
  volume    Json?    // Volume indicators
  createdAt DateTime @default(now())

  @@unique([symbol, timeframe, timestamp])
  @@index([symbol, timeframe])
  @@index([timestamp])
}

model AuditLog {
  id          String     @id @default(cuid())
  userId      String
  action      AuditAction
  resource    String     // e.g., 'trade', 'portfolio', 'signal'
  resourceId  String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime   @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([timestamp])
}

model ApiKey {
  id          String   @id @default(cuid())
  userId      String
  name        String
  keyHash     String   @unique
  permissions Json     // Array of permissions
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([keyHash])
}

model Subscription {
  id            String            @id @default(cuid())
  userId        String
  plan          SubscriptionPlan
  status        SubscriptionStatus
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean       @default(false)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model PortfolioAnalytics {
  id          String   @id @default(cuid())
  portfolioId String
  date        DateTime
  totalValue  Float
  dailyPnL    Float
  totalReturn Float
  sharpeRatio Float?
  maxDrawdown Float?
  winRate     Float?
  analytics   Json     // Detailed analytics data

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, date])
  @@index([date])
}

model SystemMetrics {
  id               String   @id @default(cuid())
  timestamp        DateTime @default(now())
  activeUsers      Int      @default(0)
  totalTrades      Int      @default(0)
  systemUptime     Float    @default(0)
  avgResponseTime  Float    @default(0)
  errorRate        Float    @default(0)
  memoryUsage      Float    @default(0)
  cpuUsage         Float    @default(0)
  metrics          Json?    // Additional system metrics

  @@index([timestamp])
}

// Enums
enum UserRole {
  ADMIN
  TRADER
  VIEWER
  DEMO
}

enum TradeType {
  MARKET
  LIMIT
  STOP
  STOP_LIMIT
}

enum TradeSide {
  BUY
  SELL
}

enum TradeStatus {
  PENDING
  FILLED
  PARTIALLY_FILLED
  CANCELLED
  REJECTED
}

enum SignalType {
  BUY
  SELL
  HOLD
  STRONG_BUY
  STRONG_SELL
}

enum AlertType {
  PRICE_ABOVE
  PRICE_BELOW
  PERCENT_CHANGE
  VOLUME_SPIKE
  SIGNAL_GENERATED
  CUSTOM
}

enum AuditAction {
  LOGIN
  LOGOUT
  TRADE_CREATED
  TRADE_EXECUTED
  TRADE_CANCELLED
  PORTFOLIO_CREATED
  PORTFOLIO_UPDATED
  ALERT_CREATED
  SETTINGS_UPDATED
  API_KEY_CREATED
  API_KEY_REVOKED
}

enum SubscriptionPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELLED
  UNPAID
}